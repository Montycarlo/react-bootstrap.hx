package react;

import react.ReactHelpers;
import react.ClassAttributes;

typedef HTMLProps<T> = {>ClassAttributes<T>
  
  // Standard HTML Attributes
  @:optional var accept: String;
  @:optional var acceptCharset: String;
  @:optional var action: String;
  @:optional var allowFullScreen: Bool;
  @:optional var allowTransparency: Bool;
  @:optional var alt: String;
  @:optional var async: Bool;
  @:optional var autoComplete: String;
  @:optional var autoFocus: Bool;
  @:optional var autoPlay: Bool;
  @:optional var capture: Bool;
  @:optional var cellPadding: EitherType<Float, String>;
  @:optional var cellSpacing: EitherType<Float, String>;
  @:optional var charSet: String;
  @:optional var challenge: String;
  @:optional var checked: Bool;
  @:optional var cite: String;
  @:optional var classID: String;
  @:optional var cols: Float;
  @:optional var colSpan: Float;
  @:optional var content: String;
  @:optional var controls: Bool;
  @:optional var coords: String;
  @:optional var crossOrigin: String;
  @:optional var data: String;
  @:optional var dateTime: String;
  @:native('default') @:optional var _default: Bool;
  @:optional var defer: Bool;
  @:optional var disabled: Bool;
  @:optional var download: Dynamic;
  @:optional var encType: String;
  @:optional var form: String;
  @:optional var formAction: String;
  @:optional var formEncType: String;
  @:optional var formMethod: String;
  @:optional var formNoValidate: Bool;
  @:optional var formTarget: String;
  @:optional var frameBorder: EitherType<Float, String>;
  @:optional var headers: String;
  @:optional var height: EitherType<Float, String>;
  @:optional var high: Float;
  @:optional var href: String;
  @:optional var hrefLang: String;
  @:optional var htmlFor: String;
  @:optional var httpEquiv: String;
  @:optional var integrity: String;
  @:optional var keyParams: String;
  @:optional var keyType: String;
  @:optional var kind: String;
  @:optional var label: String;
  @:optional var list: String;
  @:optional var loop: Bool;
  @:optional var low: Float;
  @:optional var manifest: String;
  @:optional var marginHeight: Float;
  @:optional var marginWidth: Float;
  @:optional var max: EitherType<Float, String>;
  @:optional var maxLength: Float;
  @:optional var media: String;
  @:optional var mediaGroup: String;
  @:optional var method: String;
  @:optional var min: EitherType<Float, String>;
  @:optional var minLength: Float;
  @:optional var multiple: Bool;
  @:optional var muted: Bool;
  @:optional var name: String;
  @:optional var nonce: String;
  @:optional var noValidate: Bool;
  @:optional var open: Bool;
  @:optional var optimum: Float;
  @:optional var pattern: String;
  @:optional var placeholder: String;
  @:optional var playsInline: Bool;
  @:optional var poster: String;
  @:optional var preload: String;
  @:optional var readOnly: Bool;
  @:optional var rel: String;
  @:optional var required: Bool;
  @:optional var reversed: Bool;
  @:optional var rows: Float;
  @:optional var rowSpan: Float;
  @:optional var sandbox: String;
  @:optional var scope: String;
  @:optional var scoped: Bool;
  @:optional var scrolling: String;
  @:optional var seamless: Bool;
  @:optional var selected: Bool;
  @:optional var shape: String;
  @:optional var size: Float;
  @:optional var sizes: String;
  @:optional var span: Float;
  @:optional var src: String;
  @:optional var srcDoc: String;
  @:optional var srcLang: String;
  @:optional var srcSet: String;
  @:optional var start: Float;
  @:optional var step: EitherType<Float, String>;
  @:optional var summary: String;
  @:optional var target: String;
  @:optional var type: String;
  @:optional var useMap: String;
  @:optional var value: EitherType<String, EitherType<Array<String>, Float>>;
  @:optional var width: EitherType<Float, String>;
  @:optional var wmode: String;
  @:optional var wrap: String;
}
